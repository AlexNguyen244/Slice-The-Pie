import React, { useRef, useEffect, useState, setState } from 'react';
import PieChart from "./PieChartClass.jsx";
import HorizontalStepper from "./ProgressBar.jsx";
import InputBox from "./InputBox.jsx";

import './App.css';


let revenueData = [ 
  { name: "Medical Center", value: 45, color: '#e3A400' },
  { name: "Student Fees", value: 4, color: '#f0bf00' },
  { name: "State of California", value: 8, color: '#f6e50e' },
  { name: "Tuition", value: 11, color: '#fff688' },
  { name: "Research Grants and Contracts", value: 13, color: '#5f63e3'},
  { name: "Pell Grants", value: 1, color: '#71a8ff' },
  { name: "Dorms, Dining, and Other Services", value: 11, color: '#0f7ab4' },
  { name: "Gifts, Endowments, Interest, Other", value: 7, color: '#d4e4ff' } 
];

let expenditureData = [ 
  { name: "Medical Center", value: 43, color: '#e3A400' }, 
  { name: "Teaching and Teaching Support", value: 23, color: '#f0bf00' }, 
  { name: "Research", value: 11, color: '#f6e50e' }, 
  { name: "Student Services and Financial Aid", value: 8, color: '#fff688'  }, 
  { name: "Operations and Maintenance (Buildings, etc)", value: 2, color: '#5f63e3'  }, 
  { name: "Administration", value: 3, color: '#71a8ff'  }, 
  { name: "Non-Educational Services", value: 2, color: '#0f7ab4' }, 
  { name: "Public Service", value: 2, color: '#d4e4ff' }, 
  { name: "Depreciation, Interest, etc.", value: 6, color: '#ffffff' } 
];


// Replicate arrays with values as 0 so user can input values
// Multi dimensional array, so JSON the content so you don't have to iterate through them
// Also creates a shallow copy so the new array doesn't point to the old one.

let revenueDataInput = JSON.parse(JSON.stringify(revenueData));;
let expenditureDataInput = JSON.parse(JSON.stringify(expenditureData));;

// Reset values in the input array to 0
for (const [index, value] of revenueDataInput.entries()) {
  value["value"] = 0;
}
for (const [index, value] of expenditureDataInput.entries()) {
  value["value"] = 0;
}

let revenueInfo = [
  { name: "Medical Center", info: "A large, not-for-profit regional medical center, including multiple hospitals, labs and clinics. Income comes from patients, medical insurance companies, and government programs like medicare." },
  { name: "Student Fees", info: "Fees are dedicated to specific services, such as athletic facilities, bus service (UNITRANS), student organizations, the CoHo and Student Community Center, etc." },
  { name: "State of California", info: "General funds given by the taxpayers of California, appropriated annualy by the state legislature. General funds are not dedicated to specific services."  },
  { name: "Tuition", value: 11, info: "Students pay tuition to attend the University. Non-California residents pay about twice as much as residents.  Tuition is also general funds." },
  { name: "Research Grants and Contracts", info: "Government and industry funds given to faculty and graduate students to perform research projects. These include up to 50% overhead in addition to the cost of the research." },
  { name: "Pell Grants",  info: "Federal grants for tuition and living expenses for low-income students. Percentage of students with Pell grants is a good way to measure who a University serves; at UCD, it's 34%; at Cal Tech it's 14%; at Sac State it's 71%." },
  { name: "Dorms, Dining, and Other Services", info: "Services other than education that people pay for, like dorms, dining, parking, etc.  At UC Davis, this also includes almost $500M of revenue generated by medical school faculty, or 8%, making this category look really big." },
  { name: "Gifts, Endowments, Interest, Other",  info: "Endowments are past gifts that were invested to provide income; interest is earned on other savings. The Museum is the direct result of a $10M gift from Jan Shrem and Maria Manetti Shrem." }
];

let expenseInfo = [
  { name: "Medical Center", info: "The cost of providing care at the Medical Center is roughly what we get paid to provide it." }, 
  { name: "Teaching and Teaching Support", info: "Professors, advisors, deans, the library, the computer labs, etc, including Medical School faculty salaries" }, 
  { name: "Research", info: "The costs of doing the research, mostly researcher salaries." }, 
  { name: "Student Services and Financial Aid", info: "Student Health, things covered by fees, Admissions, and also financial aid from the general funds, which is about $100M or 1.5%. "  }, 
  { name: "Operations and Maintenance (Buildings, etc)", info: "Upkeep of the grounds and building, and utilities, which are less than 1%."  }, 
  { name: "Administration", info: "Provost and Chancellor's offices, raising money, accounting, personnel, legal, making budgets."  }, 
  { name: "Non-Educational Services", info: "The costs of providing dorms, dining,parking, etc." }, 
  { name: "Public Service", info: "Mostly the cooperative extension, which provides agricultural services to farmers, ranchers, winemakers, etc.  Part of our mission as a land grant university." }, 
  { name: "Depreciation, Interest, etc.", info: "Depreciation is the loss of value of buildings and equipment as they wear out. Mostly unavoidable financial losses." } 
];


/* App */
function App() {
  // initialization

  // Actuall Data
  const [pieRevenueData, setPieDataRev] =   useState(revenueData);
  const [pieExpenseData, setPieDataExp] =   useState(expenditureData);

  // User input Data
  const [pieRevenueDataInput, setPieDataRevInput] =   useState(revenueDataInput);
  const [pieExpenseDataInput, setPieDataExpInput] =   useState(expenditureDataInput);


  function getPrevTotalInput(keyVal, typeInfo) {
    let tempSum = 0;
    if (typeInfo == "Revenue") {
      for (const [index, value] of revenueDataInput.entries()) {
        tempSum += value["value"];
      }
      return tempSum - revenueDataInput[keyVal]["value"];
    } else {
      for (const [index, value] of expenditureDataInput.entries()) {
        tempSum += value["value"];
      }
      return tempSum - expenditureDataInput[keyVal]["value"];
    }
  }

  function getCurrTotalInput(typeInfo) {
    let tempSum = 0;
    if (typeInfo == "Revenue") {
      for (const [index, value] of revenueDataInput.entries()) {
        tempSum += value["value"];
      }
    } else {
      for (const [index, value] of expenditureDataInput.entries()) {
        tempSum += value["value"];
      }
    }
    return tempSum;
  }

  function getInfo(key, typeInfo) {
    if (typeInfo == "Revenue") {
      return revenueInfo[key]["info"];
    } else {
      return expenseInfo[key]["info"];
    }
  }

  function updateData(index, inputData, typeInput) {
    if (typeInput == "Revenue") {
      revenueDataInput[index]["value"] = Number(inputData);
      setPieDataRevInput([...revenueDataInput]);
    } else {
      expenditureDataInput[index]["value"] = Number(inputData);
      setPieDataExpInput([...expenditureDataInput]);
    }
  }

  
  function resetData() {
    for (const [index, value] of revenueDataInput.entries()) {
      value["value"] = 0;
    }
    for (const [index, value] of expenditureDataInput.entries()) {
      value["value"] = 0;
    }
  }

  const [step, setStep] = useState(1); //state variable that tracks the current state 1,2,3 1=> reveneus 2=> Expenses 3=> Compare
  
  function restart()  {
    setStep(1);
    resetData();
    setPieDataRevInput(revenueDataInput);
    setPieDataExpInput(expenditureDataInput);
  }

  // Create input boxes with appropriate callbacks, attributes, and information
  var revenueElements = [];
  for(const [index, value] of revenueDataInput.entries()) {
    revenueElements.push(<InputBox key = {index} id={index} callback = {updateData} getInfo = {getInfo} varName = {value["name"]} type = "Revenue" color = {value["color"]} getTotalInput = {getPrevTotalInput}/> );
  }
  
  var expenseElements = [];
  for(const [index, value] of expenditureDataInput.entries()) {
    expenseElements.push(<InputBox key = {index + 10} id={index} callback = {updateData} getInfo = {getInfo} varName = {value["name"]} type = "Expense" color = {value["color"]} getTotalInput = {getPrevTotalInput}/> );
  }

 return (
  <div className = "mobileScreen">
      <h1>
        Slice the Pie
      </h1>
      <div className = "appDescription">
        <p>
          Say you got to run the University. How much would you allocate to different sectors? Learn about your funding sources, with a guessing game.
        </p>
        <p>
          You make your choices by inputting percentages of each section of a pie chart. See how well you choices match the onces the real Provost made.
        </p>
      </div>

    <HorizontalStepper step={step} />
    {step == 1 &&
    <div className="Revenues" id="revenueID">
      <h2> UC Davis Revenues </h2>
      <PieChart data={pieRevenueDataInput}/>
      <div className = "entryBoxes">
        <div className = "entryBoxTitle">
          <h4> Function </h4>
          <h4> Percentage (%) </h4>
        </div>
        {revenueElements}
        <div className = "inputTotalBox">
          <h4> Total % </h4>
          <input className="input-tag" type="number" id = "revenueTotal" readOnly = {true} placeholder="0" value={getCurrTotalInput("Revenue")}/><p className="percent"> % </p>
        </div>  
      </div>
      <button className="next-button" type="button" onClick={() => setStep(2)}> Next </button>
    </div>
    }

    {step == 2 &&
    <div className="Expenditures" id="expenditureID">
      <h2> UC Davis Expenditures </h2>
      <PieChart data={pieExpenseDataInput} className="pie-chart"/>
      <div className = "entryBoxes">
        <div className = "entryBoxTitle">
          <h4> Function </h4>
          <h4> Percentage (%) </h4>
        </div>
        {expenseElements}
        <div className = "inputTotalBox">
          <h4> Total % </h4>
          <input className="input-tag" type="number" id = "expenseTotal" readOnly = {true} placeholder="0" value={getCurrTotalInput("Expense")}/><p className="percent"> % </p>
        </div>  
      </div>
      <button className="compare-button" type="button" onClick={() => setStep(3)}> Compare </button>
      <button className="previous-button" type="button" onClick={() => setStep(1)}> Previous </button>
    </div>
    }

    {step == 3 &&
    <div className="Compare" id="revenue-compareID">
      <h2> RESULTS </h2>
      <h5> Your Revenue Guess </h5>
      <PieChart data={pieRevenueDataInput} />
      <h5> Actual Revenue </h5>
      <PieChart data={revenueData} />
      <button className="next-button" type="button" onClick={() => setStep(4)}> Next </button>
    </div>
    }

    {step == 4 &&
    <div className="Compare" id="expense-compareID">
      <h2> RESULTS </h2>
      <h5> Your Expenses Guess </h5>
      <PieChart data={pieExpenseDataInput} />
      <h5> Actual Expenses </h5>
      <PieChart data={expenditureData} />
      <button className="restart-button" type="button" onClick={restart}> Restart </button>
    </div>
    }
    
  </div>
 );
}

export default App;